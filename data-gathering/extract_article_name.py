'''
This script accepts a csv file which can be generated by downloading the data produced from 
making a query at Wikidata Query Service to obtain the curriculum topics and creates a new csv 
which can then be used for analysis by the bot.py
'''



import csv
import sys


# Check if the CSV file path is provided as a command-line argument
if len(sys.argv) != 2:
    print("Usage: python extract_article_names.py <csv_file_path>")
    sys.exit(1)

# Get the CSV file path from the command-line argument
csv_file_path = sys.argv[1]

# Initialize a list to store the extracted article names
article_names = []

try:
    with open(csv_file_path, mode="r", encoding="utf-8") as csv_file:
        # Create a CSV reader object
        csv_reader = csv.DictReader(csv_file)
        
        # Skip the first row (header) in the CSV file
        next(csv_reader, None)
        
        # Iterate through each row in the CSV file
        for row in csv_reader:
            # Extract the "articleName" field from each row
            article_name = row["articleName"]
            
            # Check if the article name is not empty
            if article_name and article_name != '""':
                # Append the non-empty article name to the list
                article_names.append(article_name)

    # Specify the path to the results CSV file
    results_file_path = "extracts.csv"

    # Write the extracted article names to a new CSV file
    with open(results_file_path, mode="w", newline="", encoding="utf-8") as results_file:
        fieldnames = ["articleName"]
        csv_writer = csv.DictWriter(results_file, fieldnames=fieldnames)
        
        # Write the article names
        for article_name in article_names:
            csv_writer.writerow({"articleName": article_name})

    print(f"Successfully extracted and saved {len(article_names)} non-empty article names to {results_file_path}")

except FileNotFoundError:
    print(f"File not found: {csv_file_path}")
except Exception as e:
    print(f"An error occurred: {str(e)}")
